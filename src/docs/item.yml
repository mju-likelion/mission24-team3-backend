paths:
  /items/{itemId}:
    get:
      summary: 아이템 가져오기
      description: 아이디에 해당하는 아이템을 가져옵니다
      tags:
        - Item
      parameters:
        - in: path
          name: itemId
          schema:
            type: string
          example: 630a297bcb5ee1489f13e620
      responses:
        "200":
          description: 아이템 가져오기 성공
          content:
            application/json:
              type: object
              properties:
                category:
                  type: string
                  example: 630a2980cb5ee1489f13e623
                name:
                  type: string
                  example: asdf
                likeCount:
                  type: integer
                  example: -1
                createdAt:
                  type: string
                  example: "2022-08-27T23:49:51.811+09:00"
                updatedAt:
                  type: string
                  example: "2022-08-27T23:49:51.811+09:00"
  /items/{itemId}/like:
    get:
      summary: 좋아요 개수
      description: 좋아요 개수를 가져옵니다
      tags:
        - Item
      parameters:
        - in: path
          name: itemId
          schema:
            type: string
          example: 630a297bcb5ee1489f13e620
      responses:
        "200":
          description: 가져오기 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  likeCount:
                    type: integer
                    description: 좋아요 개수
                    example: 1
    post:
      summary: 좋아요
      description: 좋아요 요청을 전송합니다
      security:
        - BearerAuth: []
      tags:
        - Item
      parameters:
        - in: path
          name: itemId
          schema:
            type: string
          example: 630a297bcb5ee1489f13e620
      responses:
        "204":
          description: 좋아요 성공
        "400":
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                LIKE_ALREADY_EXISTS:
                  description: 이미 좋아요가 눌러져 있습니다
                  value:
                    statusCode: 400
                    errorCode: "LIKE_ALREADY_EXISTS"
                    errorMsg: "이미 좋아요를 눌렀습니다"
        "401":
          description: 인증 오류
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                AUTHORIZATION_NOT_SUGGESTED:
                  $ref: "#/components/examples/AUTHORIZATION_NOT_SUGGESTED"
                AUTHORIZATION_INVALID:
                  $ref: "#/components/examples/AUTHORIZATION_INVALID"
    delete:
      summary: 좋아요 취소
      description: 좋아요 취소 요청을 전송합니다
      security:
        - BearerAuth: []
      tags:
        - Item
      parameters:
        - in: path
          name: itemId
          schema:
            type: string
          example: 630a297bcb5ee1489f13e620
      responses:
        "204":
          description: 좋아요 취소 성공
        "400":
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                LIKE_ALREADY_NOT_EXISTS:
                  description: 아직 좋아요가 눌러져있지 않습니다
                  value:
                    statusCode: 400
                    errorCode: "LIKE_ALREADY_EXISTS"
                    errorMsg: "아직 좋아요를 누르지 않았습니다"
        "401":
          description: 인증 오류
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                AUTHORIZATION_NOT_SUGGESTED:
                  $ref: "#/components/examples/AUTHORIZATION_NOT_SUGGESTED"
                AUTHORIZATION_INVALID:
                  $ref: "#/components/examples/AUTHORIZATION_INVALID"
  /items/{itemId}/like-exists:
    get:
      summary: 좋아요 여부 확인
      description: 유저가 해당 아이템에 좋아요를 눌렀는지 확인합니다.
      security:
        - BearerAuth: []
      tags:
        - Item
      parameters:
        - in: path
          name: itemId
          schema:
            type: string
          example: 630a297bcb5ee1489f13e620
      responses:
        "200":
          description: 좋아요 여부를 성공적으로 받아왔습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    example: true
                    description: 좋아요 여부
        "401":
          description: 인증 오류
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                AUTHORIZATION_NOT_SUGGESTED:
                  $ref: "#/components/examples/AUTHORIZATION_NOT_SUGGESTED"
                AUTHORIZATION_INVALID:
                  $ref: "#/components/examples/AUTHORIZATION_INVALID"
  /items:
    post:
      summary: 아이템 생성
      description: 아이템 생성 요청을 전송합니다
      security:
        - BearerAuth: []
      tags:
        - Item
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryId:
                  type: string
                  example: 630a297bcb5ee1489f13e620
                name:
                  type: string
                  example: 아이템 이름
      responses:
        "201":
          description: 생성 완료
        "401":
          description: 인증 오류
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                AUTHORIZATION_NOT_SUGGESTED:
                  $ref: "#/components/examples/AUTHORIZATION_NOT_SUGGESTED"
                AUTHORIZATION_INVALID:
                  $ref: "#/components/examples/AUTHORIZATION_INVALID"
    get:
      summary: 아이템 리스트 가져오기
      description: 아이템을 정렬로 가져옵니다.
      tags:
        - Item
      parameters:
        - in: query
          name: categoryId
          description: 카테고리 아이디
        - in: query
          name: skip
          description: 제외할 item 개수를 가져옵니다
          example: 100
        - in: query
          name: limit
          description: 가져올 item 개수를 설정합니다.
          example: 100
        - in: query
          name: orderBy
          description: 정렬 기준입니다, 중복해서 설정할 수 있습니다.
          example: likeCount:asc
      responses:
        "200":
          description: 아이템을 가져왔습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 630a2f0f2d75d2b1c7748441
                        category:
                          type: string
                          example: 630a2f0f2d75d2b1c7748441
                        name:
                          type: string
                          example: name
                        likeCount:
                          type: integer
                          example: 5
                        createdAt:
                          type: string
                          example: "022-08-27T14:49:51.811Z"
                        updatedAt:
                          type: string
                          example: 022-08-27T14:49:51.811Z
                  totalCount:
                    type: number
                    example: 10
                    description: 데이터베이스에 있는 전체 아이템의 개수입니다.
                  nextSkip:
                    type: number
                    example: 1
                    description: 다음 조회에 사용할 skip 값입니다.
